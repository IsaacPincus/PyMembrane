<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="class_compute_vertex_limit_energy" kind="class" language="C++" prot="public">
    <compoundname>ComputeVertexLimitEnergy</compoundname>
    <basecompoundref refid="class_compute_force_class" prot="public" virt="non-virtual">ComputeForceClass</basecompoundref>
    <includes refid="potential_limit_8hpp" local="no">potentialLimit.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_compute_vertex_limit_energy_1a3acce1527cbc48c267fe74c9449c62a1" prot="private" static="no" mutable="no">
        <type>pymemb::vector&lt; real &gt;</type>
        <definition>pymemb::vector&lt;real&gt; ComputeVertexLimitEnergy::m_lmax</definition>
        <argsstring></argsstring>
        <name>m_lmax</name>
        <qualifiedname>ComputeVertexLimitEnergy::m_lmax</qualifiedname>
        <briefdescription>
<para>maximum edge allowed </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="69" column="18" bodyfile="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_compute_vertex_limit_energy_1a1b4ba40b88c454095cfa1b427d97481e" prot="private" static="no" mutable="no">
        <type>pymemb::vector&lt; real &gt;</type>
        <definition>pymemb::vector&lt;real&gt; ComputeVertexLimitEnergy::m_lmin</definition>
        <argsstring></argsstring>
        <name>m_lmin</name>
        <qualifiedname>ComputeVertexLimitEnergy::m_lmin</qualifiedname>
        <briefdescription>
<para>maximum edge allowed </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="70" column="18" bodyfile="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_compute_vertex_limit_energy_1a8ee228a8edb41a43acf22a2f34722871" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComputeVertexLimitEnergy::ComputeVertexLimitEnergy</definition>
        <argsstring>(SystemClass &amp;system)</argsstring>
        <name>ComputeVertexLimitEnergy</name>
        <qualifiedname>ComputeVertexLimitEnergy::ComputeVertexLimitEnergy</qualifiedname>
        <param>
          <type><ref refid="class_system_class" kindref="compound">SystemClass</ref> &amp;</type>
          <declname>system</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; potential name</para>
<para>&lt; potential type</para>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="17" column="3" bodyfile="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" bodystart="17" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="class_compute_vertex_limit_energy_1aedccb352d4de559393524b479e4b46e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComputeVertexLimitEnergy::~ComputeVertexLimitEnergy</definition>
        <argsstring>()</argsstring>
        <name>~ComputeVertexLimitEnergy</name>
        <qualifiedname>ComputeVertexLimitEnergy::~ComputeVertexLimitEnergy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="23" column="3" bodyfile="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="class_compute_vertex_limit_energy_1abf50d7f6dceed56793460b2a16873ab7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void ComputeVertexLimitEnergy::set_default_properties</definition>
        <argsstring>(void) override</argsstring>
        <name>set_default_properties</name>
        <qualifiedname>ComputeVertexLimitEnergy::set_default_properties</qualifiedname>
        <reimplements refid="group__computeenergy_1ga0396c90166fc2197ebf24f1a8fbb11fb">set_default_properties</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Set property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="25" column="8" bodyfile="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" bodystart="25" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_compute_vertex_limit_energy_1abfdfc9930ecf67f8ef990915597f8ca9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void ComputeVertexLimitEnergy::set_property</definition>
        <argsstring>(std::map&lt; std::string, std::map&lt; std::string, std::string &gt; &gt; &amp;region_map) override</argsstring>
        <name>set_property</name>
        <qualifiedname>ComputeVertexLimitEnergy::set_property</qualifiedname>
        <reimplements refid="group__computeenergy_1gaed03d57ba661016fdb23695e588c96df">set_property</reimplements>
        <param>
          <type>std::map&lt; std::string, std::map&lt; std::string, std::string &gt; &gt; &amp;</type>
          <declname>region_map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="34" column="8" bodyfile="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" bodystart="34" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_compute_vertex_limit_energy_1af0f38d412c6016614bacd3ae7cf62eba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt; std::string, std::string &gt; ComputeVertexLimitEnergy::get_info</definition>
        <argsstring>(void) override</argsstring>
        <name>get_info</name>
        <qualifiedname>ComputeVertexLimitEnergy::get_info</qualifiedname>
        <reimplements refid="group__computeenergy_1ga58a0bb4bb69e32e705e33ee976b1a1a3">get_info</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the type object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="53" column="12" bodyfile="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" bodystart="53" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_compute_vertex_limit_energy_1a4af4faa824f59cb296c242841b5dd892" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ComputeVertexLimitEnergy::compute_energy</definition>
        <argsstring>(void) override</argsstring>
        <name>compute_energy</name>
        <qualifiedname>ComputeVertexLimitEnergy::compute_energy</qualifiedname>
        <reimplements refid="group__computeenergy_1ga2272ad88712abc721d0c9e885a297dc3">compute_energy</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>compute energy for the actual configuration </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>void</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="63" column="8" bodyfile="pymembrane/cppmodule/src/potentials/potentialLimit.cpp" bodystart="47" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_compute_vertex_limit_energy_1aabe3bdeb62cb102ac51a2c6f804ed2c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ComputeVertexLimitEnergy::compute</definition>
        <argsstring>(void) override</argsstring>
        <name>compute</name>
        <qualifiedname>ComputeVertexLimitEnergy::compute</qualifiedname>
        <reimplements refid="group__computeenergy_1ga321c411b385f2c7543cdc2f1c5d9bc33">compute</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>compute force for the actual configuration </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>void</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="64" column="8" bodyfile="pymembrane/cppmodule/src/potentials/potentialLimit.cpp" bodystart="132" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_compute_vertex_limit_energy_1aa946473d4d368fac9aaaeacf8f694b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>real</type>
        <definition>real ComputeVertexLimitEnergy::compute_edge_energy</definition>
        <argsstring>(int) override</argsstring>
        <name>compute_edge_energy</name>
        <qualifiedname>ComputeVertexLimitEnergy::compute_edge_energy</qualifiedname>
        <reimplements refid="group__computeenergy_1ga8bbee5e840659a251c742e4cafced2a4">compute_edge_energy</reimplements>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>compute the energy in a given edge </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>real </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="65" column="8" bodyfile="pymembrane/cppmodule/src/potentials/potentialLimit.cpp" bodystart="58" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_compute_vertex_limit_energy_1abc4e688de0f7f9843dc0dfd2af32635d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>real</type>
        <definition>real ComputeVertexLimitEnergy::compute_vertex_energy</definition>
        <argsstring>(int) override</argsstring>
        <name>compute_vertex_energy</name>
        <qualifiedname>ComputeVertexLimitEnergy::compute_vertex_energy</qualifiedname>
        <reimplements refid="group__computeenergy_1ga08e7dbfcd647288919d633ea47243a27">compute_vertex_energy</reimplements>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>compute the energy in a vertex edge </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>face</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>real </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; get the triangle that this vertex is part of</para>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="66" column="8" bodyfile="pymembrane/cppmodule/src/potentials/potentialLimit.cpp" bodystart="70" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_compute_vertex_limit_energy_1a8f58a440a3eaf0ce86b9eb041f04e8b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ComputeForceClass::set_property</definition>
        <argsstring>(std::map&lt; std::string, std::map&lt; std::pair&lt; std::string, std::string &gt;, std::string &gt; &gt; &amp;region_map)</argsstring>
        <name>set_property</name>
        <qualifiedname>ComputeVertexLimitEnergy::set_property</qualifiedname>
        <reimplements refid="group__computeenergy_1ga8f58a440a3eaf0ce86b9eb041f04e8b4">set_property</reimplements>
        <param>
          <type>std::map&lt; std::string, std::map&lt; std::pair&lt; std::string, std::string &gt;, std::string &gt; &gt; &amp;</type>
          <declname>region_map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="33" column="3" bodyfile="pymembrane/cppmodule/src/potentials/computeforceclass.hpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_compute_vertex_limit_energy_1aed03d57ba661016fdb23695e588c96df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ComputeForceClass::set_property</definition>
        <argsstring>(std::map&lt; std::string, std::map&lt; std::string, std::string &gt; &gt; &amp;region_map)</argsstring>
        <name>set_property</name>
        <qualifiedname>ComputeVertexLimitEnergy::set_property</qualifiedname>
        <reimplements refid="group__computeenergy_1gaed03d57ba661016fdb23695e588c96df">set_property</reimplements>
        <param>
          <type>std::map&lt; std::string, std::map&lt; std::string, std::string &gt; &gt; &amp;</type>
          <declname>region_map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="33" column="3" bodyfile="pymembrane/cppmodule/src/potentials/computeforceclass.hpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_compute_vertex_limit_energy_1a2baad238a779102369f7813c101bfe8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void ComputeForceClass::set_property</definition>
        <argsstring>(std::map&lt; std::string, std::string &gt; &amp;region_map)</argsstring>
        <name>set_property</name>
        <qualifiedname>ComputeVertexLimitEnergy::set_property</qualifiedname>
        <reimplements refid="group__computeenergy_1ga2baad238a779102369f7813c101bfe8e">set_property</reimplements>
        <param>
          <type>std::map&lt; std::string, std::string &gt; &amp;</type>
          <declname>region_map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="33" column="3" bodyfile="pymembrane/cppmodule/src/potentials/computeforceclass.hpp" bodystart="106" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Limit is a tethering potential, if edge is longer or shorter than a given values, energy is infinity, otherwise it is zero. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>ComputeForceClass</label>
        <link refid="class_compute_force_class"/>
      </node>
      <node id="1">
        <label>ComputeVertexLimitEnergy</label>
        <link refid="class_compute_vertex_limit_energy"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>ComputeForceClass</label>
        <link refid="class_compute_force_class"/>
        <childnode refid="3" relation="usage">
          <edgelabel>_system</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>ComputeMesh</label>
        <link refid="class_compute_mesh"/>
      </node>
      <node id="1">
        <label>ComputeVertexLimitEnergy</label>
        <link refid="class_compute_vertex_limit_energy"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>DumperClass</label>
        <link refid="class_dumper_class"/>
      </node>
      <node id="3">
        <label>SystemClass</label>
        <link refid="class_system_class"/>
        <childnode refid="4" relation="usage">
          <edgelabel>compute_mesh</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>dumper</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" line="14" column="1" bodyfile="pymembrane/cppmodule/src/potentials/potentialLimit.hpp" bodystart="15" bodyend="71"/>
    <listofallmembers>
      <member refid="group__computeenergy_1ga1e578bf5ff731135d0b2ddecfbc8d08f" prot="protected" virt="non-virtual"><scope>ComputeVertexLimitEnergy</scope><name>_system</name></member>
      <member refid="class_compute_vertex_limit_energy_1aabe3bdeb62cb102ac51a2c6f804ed2c7" prot="public" virt="virtual"><scope>ComputeVertexLimitEnergy</scope><name>compute</name></member>
      <member refid="group__computeenergy_1ga34cf9345d68255904b5330becdecbdaf" prot="public" virt="virtual"><scope>ComputeVertexLimitEnergy</scope><name>compute_atomic_stress</name></member>
      <member refid="class_compute_vertex_limit_energy_1aa946473d4d368fac9aaaeacf8f694b64" prot="public" virt="virtual"><scope>ComputeVertexLimitEnergy</scope><name>compute_edge_energy</name></member>
      <member refid="class_compute_vertex_limit_energy_1a4af4faa824f59cb296c242841b5dd892" prot="public" virt="virtual"><scope>ComputeVertexLimitEnergy</scope><name>compute_energy</name></member>
      <member refid="group__computeenergy_1ga23edc1b54acde33340b26a6803ab1b11" prot="public" virt="virtual"><scope>ComputeVertexLimitEnergy</scope><name>compute_face_energy</name></member>
      <member refid="group__computeenergy_1ga64d22bda8431572210c39e3e1e875c8b" prot="public" virt="virtual"><scope>ComputeVertexLimitEnergy</scope><name>compute_stress</name></member>
      <member refid="class_compute_vertex_limit_energy_1abc4e688de0f7f9843dc0dfd2af32635d" prot="public" virt="virtual"><scope>ComputeVertexLimitEnergy</scope><name>compute_vertex_energy</name></member>
      <member refid="group__computeenergy_1gaf97cbd35283669823a16e0b4dcd32968" prot="public" virt="non-virtual"><scope>ComputeVertexLimitEnergy</scope><name>ComputeForceClass</name></member>
      <member refid="class_compute_vertex_limit_energy_1a8ee228a8edb41a43acf22a2f34722871" prot="public" virt="non-virtual"><scope>ComputeVertexLimitEnergy</scope><name>ComputeVertexLimitEnergy</name></member>
      <member refid="class_compute_vertex_limit_energy_1af0f38d412c6016614bacd3ae7cf62eba" prot="public" virt="virtual"><scope>ComputeVertexLimitEnergy</scope><name>get_info</name></member>
      <member refid="group__computeenergy_1gaa43e6acd29b6c9f08d697f75a9511a7a" prot="public" virt="non-virtual"><scope>ComputeVertexLimitEnergy</scope><name>get_name</name></member>
      <member refid="group__computeenergy_1ga861f1f41d248b6be0b36041b616799d6" prot="public" virt="non-virtual"><scope>ComputeVertexLimitEnergy</scope><name>get_type</name></member>
      <member refid="class_compute_vertex_limit_energy_1a3acce1527cbc48c267fe74c9449c62a1" prot="private" virt="non-virtual"><scope>ComputeVertexLimitEnergy</scope><name>m_lmax</name></member>
      <member refid="class_compute_vertex_limit_energy_1a1b4ba40b88c454095cfa1b427d97481e" prot="private" virt="non-virtual"><scope>ComputeVertexLimitEnergy</scope><name>m_lmin</name></member>
      <member refid="group__computeenergy_1ga8ec4ed9cf79bed6444c1621eef8efa81" prot="protected" virt="non-virtual"><scope>ComputeVertexLimitEnergy</scope><name>m_name</name></member>
      <member refid="group__computeenergy_1gadb5d84db13570b5bc582f012f669839b" prot="protected" virt="non-virtual"><scope>ComputeVertexLimitEnergy</scope><name>m_type</name></member>
      <member refid="group__computeenergy_1ga202b54b76328711b6c432e151bb6c88e" prot="protected" virt="non-virtual"><scope>ComputeVertexLimitEnergy</scope><name>NUM_TYPES_ALLOWED</name></member>
      <member refid="group__computeenergy_1gaddb0efd4a25e91ecc3cd438f1629a6aa" prot="protected" virt="non-virtual"><scope>ComputeVertexLimitEnergy</scope><name>NUM_TYPES_PAIR</name></member>
      <member refid="group__computeenergy_1gac73c9289ff58b1a567f40404c73b5493" prot="public" virt="non-virtual"><scope>ComputeVertexLimitEnergy</scope><name>print_warning_calling</name></member>
      <member refid="group__computeenergy_1ga7939d88d72577fafd8bba80f028a6090" prot="public" virt="non-virtual"><scope>ComputeVertexLimitEnergy</scope><name>print_warning_property_name</name></member>
      <member refid="class_compute_vertex_limit_energy_1abf50d7f6dceed56793460b2a16873ab7" prot="public" virt="virtual"><scope>ComputeVertexLimitEnergy</scope><name>set_default_properties</name></member>
      <member refid="class_compute_vertex_limit_energy_1abfdfc9930ecf67f8ef990915597f8ca9" prot="public" virt="virtual"><scope>ComputeVertexLimitEnergy</scope><name>set_property</name></member>
      <member refid="class_compute_vertex_limit_energy_1a8f58a440a3eaf0ce86b9eb041f04e8b4" prot="public" virt="virtual"><scope>ComputeVertexLimitEnergy</scope><name>set_property</name></member>
      <member refid="class_compute_vertex_limit_energy_1aed03d57ba661016fdb23695e588c96df" prot="public" virt="virtual"><scope>ComputeVertexLimitEnergy</scope><name>set_property</name></member>
      <member refid="class_compute_vertex_limit_energy_1a2baad238a779102369f7813c101bfe8e" prot="public" virt="virtual"><scope>ComputeVertexLimitEnergy</scope><name>set_property</name></member>
      <member refid="group__computeenergy_1ga2851881fb1a9f8e03fc7530b38db5ade" prot="public" virt="virtual"><scope>ComputeVertexLimitEnergy</scope><name>~ComputeForceClass</name></member>
      <member refid="class_compute_vertex_limit_energy_1aedccb352d4de559393524b479e4b46e4" prot="public" virt="non-virtual"><scope>ComputeVertexLimitEnergy</scope><name>~ComputeVertexLimitEnergy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
