<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="fromstring_8hpp" kind="file" language="C++">
    <compoundname>fromstring.hpp</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">fstream</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">iterator</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cctype</includes>
    <includedby refid="constraintclass_8hpp" local="yes">pymembrane/cppmodule/src/constraints/constraintclass.hpp</includedby>
    <includedby refid="dumper_8cpp" local="yes">pymembrane/cppmodule/src/dumper/dumper.cpp</includedby>
    <includedby refid="integratorclass_8hpp" local="yes">pymembrane/cppmodule/src/integrators/integratorclass.hpp</includedby>
    <includedby refid="montercarlo__flip__edge_8hpp" local="yes">pymembrane/cppmodule/src/integrators/montercarlo_flip_edge.hpp</includedby>
    <includedby refid="montercarlo__spin__vertex_8hpp" local="yes">pymembrane/cppmodule/src/integrators/montercarlo_spin_vertex.hpp</includedby>
    <includedby refid="montercarlo__swap__edge_8hpp" local="yes">pymembrane/cppmodule/src/integrators/montercarlo_swap_edge.hpp</includedby>
    <includedby refid="montercarlo__swap__vertex_8hpp" local="yes">pymembrane/cppmodule/src/integrators/montercarlo_swap_vertex.hpp</includedby>
    <includedby refid="montercarlo__vertex_8hpp" local="yes">pymembrane/cppmodule/src/integrators/montercarlo_vertex.hpp</includedby>
    <includedby refid="fire_8hpp" local="yes">pymembrane/cppmodule/src/minimizer/fire.hpp</includedby>
    <includedby refid="minimizerclass_8hpp" local="yes">pymembrane/cppmodule/src/minimizer/minimizerclass.hpp</includedby>
    <includedby refid="computeforceclass_8hpp" local="yes">pymembrane/cppmodule/src/potentials/computeforceclass.hpp</includedby>
    <includedby refid="pybind__export__types_8hpp" local="yes">pymembrane/cppmodule/src/types/pybind_export_types.hpp</includedby>
    <includedby refid="fromdicttovec_8hpp" local="yes">pymembrane/cppmodule/src/utils/fromdicttovec.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>pymembrane/cppmodule/src/utils/fromstring.hpp</label>
        <link refid="fromstring_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>cctype</label>
      </node>
      <node id="4">
        <label>fstream</label>
      </node>
      <node id="7">
        <label>iomanip</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>iterator</label>
      </node>
      <node id="6">
        <label>sstream</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6">
        <label>pymembrane/cppmodule/src/compute/pybind_export_compute.hpp</label>
        <link refid="pybind__export__compute_8hpp_source"/>
      </node>
      <node id="3">
        <label>pymembrane/cppmodule/src/constraints/constraintarea.hpp</label>
        <link refid="constraintarea_8hpp_source"/>
      </node>
      <node id="2">
        <label>pymembrane/cppmodule/src/constraints/constraintclass.hpp</label>
        <link refid="constraintclass_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>pymembrane/cppmodule/src/constraints/constraintvolume.hpp</label>
        <link refid="constraintvolume_8hpp_source"/>
      </node>
      <node id="5">
        <label>pymembrane/cppmodule/src/evolver/evolverclass.hpp</label>
        <link refid="evolverclass_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pymembrane/cppmodule/src/evolver/pybind_export_evolver.hpp</label>
        <link refid="pybind__export__evolver_8hpp_source"/>
      </node>
      <node id="10">
        <label>pymembrane/cppmodule/src/integrators/integrator_brownian_vertex.hpp</label>
        <link refid="integrator__brownian__vertex_8hpp_source"/>
      </node>
      <node id="11">
        <label>pymembrane/cppmodule/src/integrators/integrator_verlet_vertex.hpp</label>
        <link refid="integrator__verlet__vertex_8hpp_source"/>
      </node>
      <node id="9">
        <label>pymembrane/cppmodule/src/integrators/integratorclass.hpp</label>
        <link refid="integratorclass_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>pymembrane/cppmodule/src/integrators/montecarlointegrator.hpp</label>
        <link refid="montecarlointegrator_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>pymembrane/cppmodule/src/integrators/montercarlo_flip_edge.hpp</label>
        <link refid="montercarlo__flip__edge_8hpp_source"/>
      </node>
      <node id="13">
        <label>pymembrane/cppmodule/src/integrators/montercarlo_spin_vertex.hpp</label>
        <link refid="montercarlo__spin__vertex_8hpp_source"/>
      </node>
      <node id="14">
        <label>pymembrane/cppmodule/src/integrators/montercarlo_swap_edge.hpp</label>
        <link refid="montercarlo__swap__edge_8hpp_source"/>
      </node>
      <node id="15">
        <label>pymembrane/cppmodule/src/integrators/montercarlo_swap_vertex.hpp</label>
        <link refid="montercarlo__swap__vertex_8hpp_source"/>
      </node>
      <node id="16">
        <label>pymembrane/cppmodule/src/integrators/montercarlo_vertex.hpp</label>
        <link refid="montercarlo__vertex_8hpp"/>
      </node>
      <node id="8">
        <label>pymembrane/cppmodule/src/minimizer/fire.hpp</label>
        <link refid="fire_8hpp_source"/>
      </node>
      <node id="17">
        <label>pymembrane/cppmodule/src/minimizer/minimizerclass.hpp</label>
        <link refid="minimizerclass_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>pymembrane/cppmodule/src/potentials/computeforceclass.hpp</label>
        <link refid="computeforceclass_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>pymembrane/cppmodule/src/potentials/potentialBending.hpp</label>
        <link refid="potential_bending_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>pymembrane/cppmodule/src/potentials/potentialBendingHelfrich.hpp</label>
        <link refid="potential_bending_helfrich_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>pymembrane/cppmodule/src/potentials/potentialCauchyGreen.hpp</label>
        <link refid="potential_cauchy_green_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>pymembrane/cppmodule/src/potentials/potentialConstantAreaTriangle.hpp</label>
        <link refid="potential_constant_area_triangle_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>pymembrane/cppmodule/src/potentials/potentialDihedralHarmonics.hpp</label>
        <link refid="potential_dihedral_harmonics_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>pymembrane/cppmodule/src/potentials/potentialHarmonic.hpp</label>
        <link refid="potential_harmonic_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>pymembrane/cppmodule/src/potentials/potentialHarmonicSloutskin.hpp</label>
        <link refid="potential_harmonic_sloutskin_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>pymembrane/cppmodule/src/potentials/potentialIsing.hpp</label>
        <link refid="potential_ising_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>pymembrane/cppmodule/src/potentials/potentialLimit.hpp</label>
        <link refid="potential_limit_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>pymembrane/cppmodule/src/potentials/potentialLineTension.hpp</label>
        <link refid="potential_line_tension_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>pymembrane/cppmodule/src/potentials/potentialSubstrate.hpp</label>
        <link refid="potential_substrate_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>pymembrane/cppmodule/src/types/pybind_export_types.hpp</label>
        <link refid="pybind__export__types_8hpp_source"/>
      </node>
      <node id="32">
        <label>pymembrane/cppmodule/src/utils/fromdicttovec.hpp</label>
        <link refid="fromdicttovec_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>pymembrane/cppmodule/src/utils/fromstring.hpp</label>
        <link refid="fromstring_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceutil">util</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__fromstring_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__fromstring_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>to_string_scientific(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>a_value)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>out;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::scientific<sp/>&lt;&lt;<sp/>a_value;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>to_string_with_precision(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>a_value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>8)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//https://stackoverflow.com/questions/16605967/set-precision-of-stdto-string-when-converting-floating-point-values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>out;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.precision(n);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/>a_value;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>to_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>a_value)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>out;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>a_value;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>to_string_vec(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>a_value)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>out;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>a_value.size();<sp/>++i)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>a_value[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from_string_int(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;string_val)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::stoi(string_val));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>from_string_double(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;string_val)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::stod(string_val));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from_string_unsigned(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;string_val)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::stoi(string_val));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>from_string_bool(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;string_val)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(string_val.compare(</highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(string_val.compare(</highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(string_val.compare(</highlight><highlight class="stringliteral">&quot;True&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(string_val.compare(</highlight><highlight class="stringliteral">&quot;False&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>util</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="pymembrane/cppmodule/src/utils/fromstring.hpp"/>
  </compounddef>
</doxygen>
