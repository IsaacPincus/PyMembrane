<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="pybind__export__box_8hpp" kind="file" language="C++">
    <compoundname>pybind_export_box.hpp</compoundname>
    <includes refid="box_8hpp" local="yes">box.hpp</includes>
    <includedby refid="pybindexport_8cpp" local="yes">pymembrane/cppmodule/src/pybindexport.cpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>box.hpp</label>
        <link refid="box_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>pymembrane/cppmodule/src/box/pybind_export_box.hpp</label>
        <link refid="pybind__export__box_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>../types/globaltypes.hpp</label>
        <link refid="globaltypes_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>math.h</label>
      </node>
      <node id="5">
        <label>sstream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="pybind__export__box_8hpp_1a817a03bbe921ee0d08ecfe738d9dcca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_BoxType</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_BoxType</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/box/pybind_export_box.hpp" line="29" column="6" bodyfile="pymembrane/cppmodule/src/box/pybind_export_box.hpp" bodystart="29" bodyend="154"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/************************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>MIT<sp/>License<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>Dr.<sp/>Daniel<sp/>Alejandro<sp/>Matoz<sp/>Fernandez<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdamatoz@gmail.com<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all<sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment">*<sp/>SOFTWARE.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__pybind_export_box_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__pybind_export_box_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;box.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_BoxType(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;BoxType&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;Box&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="struct_box_type" kindref="compound">BoxType</ref><sp/>&amp;self,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Lx,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Ly,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Lz)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(&amp;self)<sp/><ref refid="struct_box_type" kindref="compound">BoxType</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x<sp/>=<sp/>fabs(Lx);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y<sp/>=<sp/>fabs(Ly);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z<sp/>=<sp/>fabs(Lz);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.x<sp/>=<sp/>-0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.x<sp/>=<sp/>0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.y<sp/>=<sp/>-0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.y<sp/>=<sp/>0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.z<sp/>=<sp/>-0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.z<sp/>=<sp/>0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.x<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.y<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.z<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="struct_box_type" kindref="compound">BoxType</ref><sp/>&amp;self,<sp/>std::pair&lt;real,<sp/>real&gt;<sp/>Lxpair,<sp/>std::pair&lt;real,<sp/>real&gt;<sp/>Lypair,<sp/>std::pair&lt;real,<sp/>real&gt;<sp/>Lzpair)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(&amp;self)<sp/><ref refid="struct_box_type" kindref="compound">BoxType</ref>();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Lxlo<sp/>=<sp/>std::get&lt;0&gt;(Lxpair);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Lxhi<sp/>=<sp/>std::get&lt;1&gt;(Lxpair);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Lylo<sp/>=<sp/>std::get&lt;0&gt;(Lypair);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Lyhi<sp/>=<sp/>std::get&lt;1&gt;(Lypair);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Lzlo<sp/>=<sp/>std::get&lt;0&gt;(Lzpair);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Lzhi<sp/>=<sp/>std::get&lt;1&gt;(Lzpair);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(Lxlo<sp/>&lt;<sp/>Lxhi);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(Lylo<sp/>&lt;<sp/>Lyhi);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(Lzlo<sp/>&lt;<sp/>Lzhi);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x<sp/>=<sp/>Lxhi<sp/>-<sp/>Lxlo;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y<sp/>=<sp/>Lyhi<sp/>-<sp/>Lylo;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z<sp/>=<sp/>Lzhi<sp/>-<sp/>Lzlo;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.x<sp/>=<sp/>Lxlo;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.x<sp/>=<sp/>Lxhi;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.y<sp/>=<sp/>Lylo;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.y<sp/>=<sp/>Lyhi;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.z<sp/>=<sp/>Lzlo;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.z<sp/>=<sp/>Lzhi;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.x<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.y<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.z<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="struct_box_type" kindref="compound">BoxType</ref><sp/>&amp;self,<sp/>real<sp/>Lx,<sp/>real<sp/>Ly,<sp/>real<sp/>Lz,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>periodic_x,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>periodic_y,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>periodic_z)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(&amp;self)<sp/><ref refid="struct_box_type" kindref="compound">BoxType</ref>();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x<sp/>=<sp/>fabs(Lx);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y<sp/>=<sp/>fabs(Ly);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z<sp/>=<sp/>fabs(Lz);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.x<sp/>=<sp/>-0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.x<sp/>=<sp/>0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.y<sp/>=<sp/>-0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.y<sp/>=<sp/>0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.z<sp/>=<sp/>-0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.z<sp/>=<sp/>0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.x<sp/>=<sp/>periodic_x;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.y<sp/>=<sp/>periodic_y;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.z<sp/>=<sp/>periodic_z;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="struct_box_type" kindref="compound">BoxType</ref><sp/>&amp;self,<sp/>real<sp/>Lx,<sp/>real<sp/>Ly,<sp/>real<sp/>Lz,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>periodic)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(&amp;self)<sp/><ref refid="struct_box_type" kindref="compound">BoxType</ref>();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x<sp/>=<sp/>fabs(Lx);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y<sp/>=<sp/>fabs(Ly);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z<sp/>=<sp/>fabs(Lz);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.x<sp/>=<sp/>-0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.x<sp/>=<sp/>0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.y<sp/>=<sp/>-0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.y<sp/>=<sp/>0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.z<sp/>=<sp/>-0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.z<sp/>=<sp/>0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.x<sp/>=<sp/>periodic;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.y<sp/>=<sp/>periodic;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.z<sp/>=<sp/>periodic;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="struct_box_type" kindref="compound">BoxType</ref><sp/>&amp;self,<sp/>std::pair&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>std::pair&lt;real,<sp/>real&gt;&gt;<sp/>Lxpair,<sp/>std::pair&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>std::pair&lt;real,<sp/>real&gt;&gt;<sp/>Lypair,<sp/>std::pair&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>std::pair&lt;real,<sp/>real&gt;&gt;<sp/>Lzpair)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(&amp;self)<sp/><ref refid="struct_box_type" kindref="compound">BoxType</ref>();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Lxlo<sp/>=<sp/>std::get&lt;0&gt;(std::get&lt;1&gt;(Lxpair));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Lxhi<sp/>=<sp/>std::get&lt;1&gt;(std::get&lt;1&gt;(Lxpair));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Lylo<sp/>=<sp/>std::get&lt;0&gt;(std::get&lt;1&gt;(Lypair));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Lyhi<sp/>=<sp/>std::get&lt;1&gt;(std::get&lt;1&gt;(Lypair));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Lzlo<sp/>=<sp/>std::get&lt;0&gt;(std::get&lt;1&gt;(Lzpair));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>Lzhi<sp/>=<sp/>std::get&lt;1&gt;(std::get&lt;1&gt;(Lzpair));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(Lxlo<sp/>&lt;<sp/>Lxhi);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(Lylo<sp/>&lt;<sp/>Lyhi);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(Lzlo<sp/>&lt;<sp/>Lzhi);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x<sp/>=<sp/>Lxhi<sp/>-<sp/>Lxlo;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y<sp/>=<sp/>Lyhi<sp/>-<sp/>Lylo;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z<sp/>=<sp/>Lzhi<sp/>-<sp/>Lzlo;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.x<sp/>=<sp/>Lxlo;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.x<sp/>=<sp/>Lxhi;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.y<sp/>=<sp/>Lylo;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.y<sp/>=<sp/>Lyhi;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.z<sp/>=<sp/>Lzlo;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.z<sp/>=<sp/>Lzhi;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.x<sp/>=<sp/>std::get&lt;0&gt;(Lxpair);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.y<sp/>=<sp/>std::get&lt;0&gt;(Lypair);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.z<sp/>=<sp/>std::get&lt;0&gt;(Lzpair);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__repr__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_box_type" kindref="compound">BoxType</ref><sp/>&amp;self)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>return_val<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;box<sp/>Lx<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Ly<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Lz<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_val+=<sp/></highlight><highlight class="stringliteral">&quot;&lt;box<sp/>Lx<sp/>=<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.x)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.x)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_val+=<sp/></highlight><highlight class="stringliteral">&quot;&lt;box<sp/>Ly<sp/>=<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.y)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.y)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_val+=<sp/></highlight><highlight class="stringliteral">&quot;&lt;box<sp/>Lz<sp/>=<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.z)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.z)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_val<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;periodic_Lx<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.x)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>periodic_Ly<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.y)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>periodic_Lz<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(self.<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">periodic</ref>.z)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(return_val);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;Lhi&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">BoxType::Lhi</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Upper<sp/>box<sp/>boundary&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;Llo&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">BoxType::Llo</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Lower<sp/>box<sp/>boundary&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">BoxType::L</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Box<sp/>length&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;periodic&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_box_type_1a534016d1f0cf808b4f718741f036c319" kindref="member">BoxType::periodic</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Periodicity&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Functions<sp/>over<sp/>the<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;volume&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_box_type" kindref="compound">BoxType</ref><sp/>&amp;self)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z;<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;Volume<sp/>of<sp/>the<sp/>box&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;scale&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="struct_box_type" kindref="compound">BoxType</ref><sp/>&amp;self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;scalex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;scaley,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;scalez)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x<sp/>*=<sp/>fabs(scalex);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y<sp/>*=<sp/>fabs(scaley);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z<sp/>*=<sp/>fabs(scalez);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.x<sp/>=<sp/>-0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.x<sp/>=<sp/>0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.x;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.y<sp/>=<sp/>-0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.y<sp/>=<sp/>0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.y;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a4d10fdda331fe9d2cc3b9548d6c9b70a" kindref="member">Llo</ref>.z<sp/>=<sp/>-0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="struct_box_type_1a30077445042e7c17a1d356ed04f74744" kindref="member">Lhi</ref>.z<sp/>=<sp/>0.5<sp/>*<sp/>self.<ref refid="struct_box_type_1aa56a6aa74cb35f2c34983324e0c8b660" kindref="member">L</ref>.z;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/></highlight><highlight class="stringliteral">&quot;Scale<sp/>the<sp/>box<sp/>by<sp/>a<sp/>factors<sp/>scalex,<sp/>scaley,<sp/>scalez&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="pymembrane/cppmodule/src/box/pybind_export_box.hpp"/>
  </compounddef>
</doxygen>
