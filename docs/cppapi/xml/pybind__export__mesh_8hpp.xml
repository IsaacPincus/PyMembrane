<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="pybind__export__mesh_8hpp" kind="file" language="C++">
    <compoundname>pybind_export_mesh.hpp</compoundname>
    <includes refid="meshproperties_8hpp" local="yes">meshproperties.hpp</includes>
    <includes refid="computegeometry_8hpp" local="yes">computegeometry.hpp</includes>
    <includedby refid="pybindexport_8cpp" local="yes">pymembrane/cppmodule/src/pybindexport.cpp</includedby>
    <incdepgraph>
      <node id="14">
        <label>box.hpp</label>
        <link refid="box_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>../box/pbc.hpp</label>
        <link refid="pbc_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>computegeometry.hpp</label>
        <link refid="computegeometry_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>meshproperties.hpp</label>
        <link refid="meshproperties_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp</label>
        <link refid="pybind__export__mesh_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>../types/globaltypes.hpp</label>
        <link refid="globaltypes_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>functional</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="11">
        <label>math.h</label>
      </node>
      <node id="10">
        <label>sstream</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="4">
        <label>typeinfo</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1a16a936b4e74f859a90296c5cdf8d2d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_PropertyFaces</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_PropertyFaces</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="9" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="9" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1adce8e5d7405cc1fb90e8629a21b75907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_PropertyFaces_Vector</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_PropertyFaces_Vector</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="18" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="18" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1abdcb0a55474d44b1eba8b9d662ff6111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_PropertyVertices</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_PropertyVertices</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="31" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="31" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1a2b441ba7cbbe435bf1552547e303d7cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_PropertyVertices_Vector</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_PropertyVertices_Vector</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="39" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="39" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1aedffeaea84c64b8cf98620432fa4657a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_PropertyEdges</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_PropertyEdges</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="52" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="52" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1af8936f0fdf98a34e6a85812d6429398e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_PropertyEdges_Vector</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_PropertyEdges_Vector</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="60" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="60" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1ab37e0f79b2539813523a9c73af5c34b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_HE_Vertex</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_HE_Vertex</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="73" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="73" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1aee6208134c2277bc1f44ba8fea41c810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_HE_Vertex_Vector</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_HE_Vertex_Vector</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="93" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="93" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1a5cb9cb5910a8e6da45401f7c5991edba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_HE_Edge</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_HE_Edge</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; index to one of the faces shared by this edge -1 if is outer face</para>
<para>&lt; index to one of the faces shared by this edge -1 if is outer face</para>
<para>&lt; indices to the vertices around that edge</para>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="106" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="106" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1a983654e7ec77041a65cc5424e9c15011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_HE_Edge_Vector</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_HE_Edge_Vector</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="125" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="125" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1a69468b1e5300b7280ae83c003fa6070b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_HE_Face</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_HE_Face</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; face id</para>
<para>&lt; if true, face is a ghost outer face</para>
<para>&lt; number of sides face has</para>
<para>&lt; normal to that face</para>
<para>&lt; normal to that face</para>
<para>&lt; area of the triangle</para>
<para>&lt; HANDLE INDEX OF: one of the half-edges bordering the face</para>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="138" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="138" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1a13b9f28ea1e843d4f940aee97aa1ead1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_HE_Face_Vector</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_HE_Face_Vector</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="221" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="221" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1ae7bd130140bb5aedcd29b432c953c2b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_HE_HalfEdge</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_HE_HalfEdge</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; HANDLE INDEX OF: vertex at the beginning of the half-edge</para>
<para>&lt; HANDLE INDEX OF: vertex at the beginning of the half-edge</para>
<para>&lt; HANDLE INDEX OF: vertex at the end of the half-edge</para>
<para>&lt; HANDLE INDEX OF: edge this he is part of</para>
<para>&lt; HANDLE INDEX OF: face the half-edge borders</para>
<para>&lt; HANDLE INDEX OF: oppositely oriented adjacent half-edge</para>
<para>&lt; HANDLE INDEX OF: next half-edge around the face</para>
<para>&lt; HANDLE INDEX OF: previous half-edge around the face</para>
<para>&lt; if true, the halfedge is a boundary</para>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="234" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="234" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1a0e73ba9052c737fdb60eccb5e29c6fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_HE_HalfEdge_Vector</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_HE_HalfEdge_Vector</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="249" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="249" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="pybind__export__mesh_8hpp_1ad9515d04f14437abbc1b3e5afdccd523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_ReadMesh</definition>
        <argsstring>(py::module &amp;m)</argsstring>
        <name>export_ReadMesh</name>
        <param>
          <type>py::module &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" line="273" column="6" bodyfile="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp" bodystart="273" bodyend="293"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__pybind_export_mesh_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__pybind_export_mesh_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&quot;mesh.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;meshproperties.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&quot;material.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="computegeometry_8hpp" kindref="compound">computegeometry.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_PropertyFaces(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;PropertyFaces&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;PropertyFaces&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_property_faces_1a4b4b88684f852cca0a0f0cf308ff82e8" kindref="member">PropertyFaces::age</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Material<sp/>age&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;k11&quot;</highlight><highlight class="normal">,<sp/>&amp;PropertyFaces::k11,<sp/></highlight><highlight class="stringliteral">&quot;Material<sp/>growth<sp/>in<sp/>the<sp/>11<sp/>&lt;&lt;metric&gt;&gt;<sp/>direction&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;k12&quot;</highlight><highlight class="normal">,<sp/>&amp;PropertyFaces::k12,<sp/></highlight><highlight class="stringliteral">&quot;Material<sp/>growth<sp/>in<sp/>the<sp/>12<sp/>&lt;&lt;metric&gt;&gt;<sp/>direction&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;k22&quot;</highlight><highlight class="normal">,<sp/>&amp;PropertyFaces::k22,<sp/></highlight><highlight class="stringliteral">&quot;Material<sp/>growth<sp/>in<sp/>the<sp/>22<sp/>&lt;&lt;metric&gt;&gt;<sp/>direction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_PropertyFaces_Vector(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;std::vector&lt;PropertyFaces&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;PropertyFacesVector&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(py::init&lt;&gt;())</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">,<sp/>&amp;std::vector&lt;PropertyFaces&gt;::clear)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;pop_back&quot;</highlight><highlight class="normal">,<sp/>&amp;std::vector&lt;PropertyFaces&gt;::pop_back)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(std::vector&lt;PropertyFaces&gt;::*)(const<sp/><ref refid="struct_property_faces" kindref="compound">PropertyFaces</ref><sp/>&amp;))<sp/>&amp;<sp/>std::vector&lt;<ref refid="struct_property_faces" kindref="compound">PropertyFaces</ref>&gt;::push_back)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__len__&quot;</highlight><highlight class="normal">,<sp/>[](const<sp/>std::vector&lt;<ref refid="struct_property_faces" kindref="compound">PropertyFaces</ref>&gt;<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.size();<sp/>})</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__iter__&quot;</highlight><highlight class="normal">,<sp/>[](std::vector&lt;PropertyFaces&gt;<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py::make_iterator(v.begin(),<sp/>v.end());<sp/>},<sp/>py::keep_alive&lt;0,<sp/>1&gt;())</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;PropertyFaces&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>v.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>py::index_error();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[i];<sp/>})</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__setitem__&quot;</highlight><highlight class="normal">,<sp/>[](std::vector&lt;PropertyFaces&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/><ref refid="struct_property_faces" kindref="compound">PropertyFaces</ref><sp/>&amp;d)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>v.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>py::index_error();<sp/>v[i]<sp/>=<sp/>d;<sp/>});</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_PropertyVertices(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;PropertyVertices&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;PropertyVertices&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="struct_property_vertices_1a6f283f00c3fc18c9d8cc3b91979a1ff9" kindref="member">PropertyVertices::v</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Vertex<sp/>velocity&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>&amp;<ref refid="struct_property_vertices_1a1d1c5273259494464d88ccfb9a6b56f7" kindref="member">PropertyVertices::age</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Material<sp/>age&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;radius&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_property_vertices_1a1faf9bc32d59f2353ebd8839fb2f29e7" kindref="member">PropertyVertices::radius</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Vertex<sp/>radius&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_PropertyVertices_Vector(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;std::vector&lt;PropertyVertices&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;PropertyVerticesVector&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(py::init&lt;&gt;())</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">,<sp/>&amp;std::vector&lt;PropertyVertices&gt;::clear)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;pop_back&quot;</highlight><highlight class="normal">,<sp/>&amp;std::vector&lt;PropertyVertices&gt;::pop_back)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(std::vector&lt;PropertyVertices&gt;::*)(const<sp/><ref refid="struct_property_vertices" kindref="compound">PropertyVertices</ref><sp/>&amp;))<sp/>&amp;<sp/>std::vector&lt;<ref refid="struct_property_vertices" kindref="compound">PropertyVertices</ref>&gt;::push_back)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__len__&quot;</highlight><highlight class="normal">,<sp/>[](const<sp/>std::vector&lt;<ref refid="struct_property_vertices" kindref="compound">PropertyVertices</ref>&gt;<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.size();<sp/>})</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__iter__&quot;</highlight><highlight class="normal">,<sp/>[](std::vector&lt;PropertyVertices&gt;<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py::make_iterator(v.begin(),<sp/>v.end());<sp/>},<sp/>py::keep_alive&lt;0,<sp/>1&gt;())</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;PropertyVertices&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>v.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>py::index_error();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[i];<sp/>})</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__setitem__&quot;</highlight><highlight class="normal">,<sp/>[](std::vector&lt;PropertyVertices&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/><ref refid="struct_property_vertices" kindref="compound">PropertyVertices</ref><sp/>&amp;d)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>v.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>py::index_error();<sp/>v[i]<sp/>=<sp/>d;<sp/>});</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_PropertyEdges(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;PropertyEdges&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;PropertyEdges&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="struct_property_edges_1a626cf71c1a1d16c3812efc8489ce4caa" kindref="member">PropertyEdges::age</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Material<sp/>age&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;cot_alpha&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_property_edges_1ab85817d46495f16658011cf2ad03c476" kindref="member">PropertyEdges::cot_alpha</ref>,<sp/></highlight><highlight class="stringliteral">&quot;opposite<sp/>cotangent<sp/>angle<sp/>of<sp/>\vec{r0}-\vec{r1}<sp/>and<sp/>\vec{r2}-\vec{r1}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;cot_beta&quot;</highlight><highlight class="normal">,<sp/><sp/>&amp;<ref refid="struct_property_edges_1a8c139a4c3f51ea0a5a552b3872dba257" kindref="member">PropertyEdges::cot_beta</ref>,<sp/></highlight><highlight class="stringliteral">&quot;opposite<sp/>cotangent<sp/>angle<sp/>of<sp/>\vec{r0}-\vec{r3}<sp/>and<sp/>\vec{r2}-\vec{r3}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_PropertyEdges_Vector(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;std::vector&lt;PropertyEdges&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;PropertyEdgesVector&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(py::init&lt;&gt;())</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">,<sp/>&amp;std::vector&lt;PropertyEdges&gt;::clear)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;pop_back&quot;</highlight><highlight class="normal">,<sp/>&amp;std::vector&lt;PropertyEdges&gt;::pop_back)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(std::vector&lt;PropertyEdges&gt;::*)(const<sp/><ref refid="struct_property_edges" kindref="compound">PropertyEdges</ref><sp/>&amp;))<sp/>&amp;<sp/>std::vector&lt;<ref refid="struct_property_edges" kindref="compound">PropertyEdges</ref>&gt;::push_back)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__len__&quot;</highlight><highlight class="normal">,<sp/>[](const<sp/>std::vector&lt;<ref refid="struct_property_edges" kindref="compound">PropertyEdges</ref>&gt;<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.size();<sp/>})</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__iter__&quot;</highlight><highlight class="normal">,<sp/>[](std::vector&lt;PropertyEdges&gt;<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py::make_iterator(v.begin(),<sp/>v.end());<sp/>},<sp/>py::keep_alive&lt;0,<sp/>1&gt;())</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;PropertyEdges&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>v.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>py::index_error();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[i];<sp/>})</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__setitem__&quot;</highlight><highlight class="normal">,<sp/>[](std::vector&lt;PropertyEdges&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/><ref refid="struct_property_edges" kindref="compound">PropertyEdges</ref><sp/>&amp;d)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>v.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>py::index_error();<sp/>v[i]<sp/>=<sp/>d;<sp/>});</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_HE_Vertex(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;HE_VertexProp&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;Vertex&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___vertex_1a0fb51c9a20e810c681e575eb34c42661" kindref="member">HE_VertexProp::id</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Vertex<sp/>id&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___vertex_1adf4064670654eaaae383250bb2670881" kindref="member">HE_VertexProp::r</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Vertex<sp/>position&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___vertex_1a10b733266b2070ee559be35363ce4fce" kindref="member">HE_VertexProp::v</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Vertex<sp/>velocity&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;boundary&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___vertex_1ac9641c0f9a1b7de46690f52402ec9070" kindref="member">HE_VertexProp::boundary</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Vertex<sp/>True<sp/>if<sp/>it<sp/>is<sp/>at<sp/>the<sp/>boundary&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;coordination&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___vertex_1a207bbe661bc3c8c044eeab02e1f80969" kindref="member">HE_VertexProp::coordination</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Vertex<sp/>Coordination&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;normal&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___vertex_1a03f79d18a2f5b7dbf119649856362356" kindref="member">HE_VertexProp::normal</ref>,<sp/></highlight><highlight class="stringliteral">&quot;normal&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;_hedge&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___vertex_1aecce69c87c3dfff30c0d61cbf63a0e8a" kindref="member">HE_VertexProp::_hedge</ref>,<sp/></highlight><highlight class="stringliteral">&quot;halfedge<sp/>index&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;forceC&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___vertex_1a936e974f57605c5596f1b271d42fca69" kindref="member">HE_VertexProp::forceC</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Conservative<sp/>Force&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;forceD&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___vertex_1ab79703e77d0455d298ec1d7a0f1400cd" kindref="member">HE_VertexProp::forceD</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Dissipative<sp/>Force&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;energy&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___vertex_1ac385281595fec27f35b9ebeada4c78d4" kindref="member">HE_VertexProp::energy</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Conservative<sp/>Energy&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___vertex_1affc8233bb7a0b949363d3e324ee3766b" kindref="member">HE_VertexProp::mass</ref>,<sp/></highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___vertex_1a6a18915ababcf3bd3eadbf43d8f94803" kindref="member">HE_VertexProp::type</ref>,<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;energy&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___vertex_1ac385281595fec27f35b9ebeada4c78d4" kindref="member">HE_VertexProp::energy</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Conservative<sp/>Energy&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;spin&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___vertex_1aa3e5878f5684add71c82c14512221950" kindref="member">HE_VertexProp::spin</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Spin<sp/>Value&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;property&quot;</highlight><highlight class="normal">,<sp/>&amp;HE_VertexProp::_property,<sp/></highlight><highlight class="stringliteral">&quot;Properties&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_HE_Vertex_Vector(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;std::vector&lt;HE_VertexProp&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;VertexVector&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(py::init&lt;&gt;())</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">,<sp/>&amp;std::vector&lt;HE_VertexProp&gt;::clear)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;pop_back&quot;</highlight><highlight class="normal">,<sp/>&amp;std::vector&lt;HE_VertexProp&gt;::pop_back)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(std::vector&lt;HE_VertexProp&gt;::*)(const<sp/><ref refid="struct_h_e___vertex" kindref="compound">HE_VertexProp</ref><sp/>&amp;))<sp/>&amp;<sp/>std::vector&lt;<ref refid="struct_h_e___vertex" kindref="compound">HE_VertexProp</ref>&gt;::push_back)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__len__&quot;</highlight><highlight class="normal">,<sp/>[](const<sp/>std::vector&lt;<ref refid="struct_h_e___vertex" kindref="compound">HE_VertexProp</ref>&gt;<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.size();<sp/>})</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__iter__&quot;</highlight><highlight class="normal">,<sp/>[](std::vector&lt;HE_VertexProp&gt;<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py::make_iterator(v.begin(),<sp/>v.end());<sp/>},<sp/>py::keep_alive&lt;0,<sp/>1&gt;())</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;HE_VertexProp&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>v.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>py::index_error();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[i];<sp/>})</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__setitem__&quot;</highlight><highlight class="normal">,<sp/>[](std::vector&lt;HE_VertexProp&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/><ref refid="struct_h_e___vertex" kindref="compound">HE_VertexProp</ref><sp/>&amp;d)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>v.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>py::index_error();<sp/>v[i]<sp/>=<sp/>d;<sp/>});</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_HE_Edge(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;HE_EdgeProp&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;Edge&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___edge_1ac51fa0631b220e2deef78ca1ca3b5d86" kindref="member">HE_EdgeProp::id</ref>,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>&amp;HE_EdgeProp::i,<sp/></highlight><highlight class="stringliteral">&quot;one<sp/>of<sp/>the<sp/>conected<sp/>vertices&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;j&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___edge_1acffde21f8307e9dd2849f2cb02815ec7" kindref="member">HE_EdgeProp::j</ref>,<sp/></highlight><highlight class="stringliteral">&quot;one<sp/>of<sp/>the<sp/>conected<sp/>vertices&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;boundary&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___edge_1a128f8333f20d03403588f48100585c56" kindref="member">HE_EdgeProp::boundary</ref>,<sp/></highlight><highlight class="stringliteral">&quot;True<sp/>if<sp/>it<sp/>is<sp/>at<sp/>the<sp/>boundary&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;face_k&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___edge_1a1524f3bb94b45ff3cb7ac5873a4cf315" kindref="member">HE_EdgeProp::face_k</ref>,<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>to<sp/>one<sp/>of<sp/>the<sp/>faces<sp/>shared<sp/>by<sp/>this<sp/>edge<sp/>-1<sp/>if<sp/>is<sp/>outer<sp/>face&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;face_l&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___edge_1a97fef738737dc59cebb0c55d295ed3c7" kindref="member">HE_EdgeProp::face_l</ref>,<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>to<sp/>one<sp/>of<sp/>the<sp/>faces<sp/>shared<sp/>by<sp/>this<sp/>edge<sp/>-1<sp/>if<sp/>is<sp/>outer<sp/>face&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;v0&quot;</highlight><highlight class="normal">,<sp/>&amp;HE_EdgeProp::v0,<sp/></highlight><highlight class="stringliteral">&quot;vertex<sp/>around<sp/>the<sp/>edge&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;v1&quot;</highlight><highlight class="normal">,<sp/>&amp;HE_EdgeProp::v1,<sp/></highlight><highlight class="stringliteral">&quot;vertex<sp/>around<sp/>the<sp/>edge&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;v2&quot;</highlight><highlight class="normal">,<sp/>&amp;HE_EdgeProp::v2,<sp/></highlight><highlight class="stringliteral">&quot;vertex<sp/>around<sp/>the<sp/>edge&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;v3&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___edge_1a57178b673bc051de1144cd99d5919bb4" kindref="member">HE_EdgeProp::v3</ref>,<sp/></highlight><highlight class="stringliteral">&quot;vertex<sp/>around<sp/>the<sp/>edge&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;_hedge&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___edge_1abc2832d50a37f1ffaefa91e5bd8cb106" kindref="member">HE_EdgeProp::_hedge</ref>,<sp/></highlight><highlight class="stringliteral">&quot;halfedge<sp/>index&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___edge_1aac8c30d759b2a67e84b2865684107f3c" kindref="member">HE_EdgeProp::type</ref>,<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;energy&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___edge_1a369c8de2daf6e0160f848266b3ae75f4" kindref="member">HE_EdgeProp::energy</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Conservative<sp/>Energy&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;property&quot;</highlight><highlight class="normal">,<sp/>&amp;HE_EdgeProp::_property,<sp/></highlight><highlight class="stringliteral">&quot;Properties&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_HE_Edge_Vector(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;std::vector&lt;HE_EdgeProp&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;EdgeVector&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(py::init&lt;&gt;())</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">,<sp/>&amp;std::vector&lt;HE_EdgeProp&gt;::clear)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;pop_back&quot;</highlight><highlight class="normal">,<sp/>&amp;std::vector&lt;HE_EdgeProp&gt;::pop_back)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(std::vector&lt;HE_EdgeProp&gt;::*)(const<sp/><ref refid="struct_h_e___edge" kindref="compound">HE_EdgeProp</ref><sp/>&amp;))<sp/>&amp;<sp/>std::vector&lt;<ref refid="struct_h_e___edge" kindref="compound">HE_EdgeProp</ref>&gt;::push_back)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__len__&quot;</highlight><highlight class="normal">,<sp/>[](const<sp/>std::vector&lt;<ref refid="struct_h_e___edge" kindref="compound">HE_EdgeProp</ref>&gt;<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.size();<sp/>})</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__iter__&quot;</highlight><highlight class="normal">,<sp/>[](std::vector&lt;HE_EdgeProp&gt;<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py::make_iterator(v.begin(),<sp/>v.end());<sp/>},<sp/>py::keep_alive&lt;0,<sp/>1&gt;())</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;HE_EdgeProp&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>v.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>py::index_error();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[i];<sp/>})</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__setitem__&quot;</highlight><highlight class="normal">,<sp/>[](std::vector&lt;HE_EdgeProp&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/><ref refid="struct_h_e___edge" kindref="compound">HE_EdgeProp</ref><sp/>&amp;d)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>v.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>py::index_error();<sp/>v[i]<sp/>=<sp/>d;<sp/>});</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_HE_Face(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;HE_FaceProp&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;Face&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___face_1a60bada435e194a064171d9459f886ec1" kindref="member">HE_FaceProp::id</ref>,<sp/></highlight><highlight class="stringliteral">&quot;face<sp/>id&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;outer&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___face_1a7f627b1cd3d60bf8c4db81deb1d22818" kindref="member">HE_FaceProp::outer</ref>,<sp/></highlight><highlight class="stringliteral">&quot;if<sp/>True,<sp/>face<sp/>is<sp/>a<sp/>ghost<sp/>outer<sp/>face&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;nsides&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___face_1ab49f653d506b3ecc22070adde9778df9" kindref="member">HE_FaceProp::nsides</ref>,<sp/></highlight><highlight class="stringliteral">&quot;number<sp/>of<sp/>sides<sp/>face<sp/>has&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;normal&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___face_1aa5f269a9a20ca810b782eaebc54732b0" kindref="member">HE_FaceProp::normal</ref>,<sp/></highlight><highlight class="stringliteral">&quot;normal<sp/>to<sp/>that<sp/>face&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;reference_normal&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___face_1af29889f85125a5ee2d1a9bfed962b1c1" kindref="member">HE_FaceProp::normal_reference</ref>,<sp/></highlight><highlight class="stringliteral">&quot;reference<sp/>normal<sp/>to<sp/>that<sp/>face&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;area&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___face_1aeba6499e0793cef2d5c647bb70bf30f6" kindref="member">HE_FaceProp::area</ref>,<sp/></highlight><highlight class="stringliteral">&quot;area<sp/>of<sp/>the<sp/>face&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;boundary&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___face_1a8dabcdcd65ab89fd3bf699c7e4ec967b" kindref="member">HE_FaceProp::boundary</ref>,<sp/></highlight><highlight class="stringliteral">&quot;True<sp/>if<sp/>it<sp/>is<sp/>at<sp/>the<sp/>boundary&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;refmetric&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="struct_h_e___face" kindref="compound">HE_FaceProp</ref><sp/>&amp;face)<sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;real&gt;<sp/>metric;<sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metric.push_back(face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[0]);<sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metric.push_back(face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[1]);<sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metric.push_back(face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[2]);<sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metric;<sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/></highlight><highlight class="stringliteral">&quot;get<sp/>the<sp/>reference<sp/>metric&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_refmetric&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="struct_h_e___face" kindref="compound">HE_FaceProp</ref><sp/>&amp;face,<sp/>std::vector&lt;real&gt;<sp/>metric)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(metric.size()<sp/>&lt;<sp/>3)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py::print(<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>metric<sp/>must<sp/>be<sp/>[g11,<sp/>g12,<sp/>g22]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[0]<sp/>=<sp/>metric[0];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[1]<sp/>=<sp/>metric[1];</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[2]<sp/>=<sp/>metric[2];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>det<sp/>=<sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[0]*face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[2]<sp/>-<sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[1]*face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[1];</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1a1e42fc51ad1f4765ac58ea01321b869d" kindref="member">g_reference_inv</ref>[0]<sp/>=<sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[2]/det;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1a1e42fc51ad1f4765ac58ea01321b869d" kindref="member">g_reference_inv</ref>[1]<sp/>=<sp/>-face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[1]/det;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1a1e42fc51ad1f4765ac58ea01321b869d" kindref="member">g_reference_inv</ref>[2]<sp/>=<sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[0]/det;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/></highlight><highlight class="stringliteral">&quot;set<sp/>the<sp/>reference<sp/>metric<sp/>to<sp/>[g11,<sp/>g12,<sp/>g22]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_refmetric&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="struct_h_e___face" kindref="compound">HE_FaceProp</ref><sp/>&amp;face,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;real3&gt;&amp;<sp/>vertices)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices.size()<sp/>&lt;<sp/>3)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py::print(<sp/><sp/></highlight><highlight class="stringliteral">&quot;error<sp/>vertices<sp/>must<sp/>be<sp/>[v1,<sp/>v2,<sp/>v3]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>metric[3];</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pymemb::compute_form_factor_triangle(metric,<sp/>vertices[0],<sp/>vertices[1],<sp/>vertices[2]);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[0]<sp/>=<sp/>metric[0];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[1]<sp/>=<sp/>metric[1];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[2]<sp/>=<sp/>metric[2];</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>det<sp/>=<sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[0]*face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[2]<sp/>-<sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[1]*face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[1];</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1a1e42fc51ad1f4765ac58ea01321b869d" kindref="member">g_reference_inv</ref>[0]<sp/>=<sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[2]/det;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1a1e42fc51ad1f4765ac58ea01321b869d" kindref="member">g_reference_inv</ref>[1]<sp/>=<sp/>-face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[1]/det;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1a1e42fc51ad1f4765ac58ea01321b869d" kindref="member">g_reference_inv</ref>[2]<sp/>=<sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[0]/det;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/></highlight><highlight class="stringliteral">&quot;set<sp/>the<sp/>reference<sp/>metric<sp/>to<sp/>[v1,<sp/>v2,<sp/>v3]<sp/>vertices<sp/>with<sp/>v1<sp/>being<sp/>real3&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_refmetric&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="struct_h_e___face" kindref="compound">HE_FaceProp</ref><sp/>&amp;face,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;real3&gt;&amp;<sp/>vertices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_box_type" kindref="compound">BoxType</ref><sp/>_box)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices.size()<sp/>&lt;<sp/>3)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py::print(<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>vertices<sp/>must<sp/>be<sp/>[v1,<sp/>v2,<sp/>v3]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>metric[3];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pymemb::compute_form_factor_triangle(metric,<sp/>vertices[0],<sp/>vertices[1],<sp/>vertices[2],<sp/>_box);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[0]<sp/>=<sp/>metric[0];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[1]<sp/>=<sp/>metric[1];</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[2]<sp/>=<sp/>metric[2];</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real<sp/>det<sp/>=<sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[0]*face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[2]<sp/>-<sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[1]*face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[1];</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1a1e42fc51ad1f4765ac58ea01321b869d" kindref="member">g_reference_inv</ref>[0]<sp/>=<sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[2]/det;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1a1e42fc51ad1f4765ac58ea01321b869d" kindref="member">g_reference_inv</ref>[1]<sp/>=<sp/>-face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[1]/det;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face.<ref refid="struct_h_e___face_1a1e42fc51ad1f4765ac58ea01321b869d" kindref="member">g_reference_inv</ref>[2]<sp/>=<sp/>face.<ref refid="struct_h_e___face_1af5cce48b4ee5e6f0b13c35911fd58195" kindref="member">g_reference</ref>[0]/det;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/></highlight><highlight class="stringliteral">&quot;set<sp/>the<sp/>reference<sp/>metric<sp/>to<sp/>[v1,<sp/>v2,<sp/>v3]<sp/>vertices<sp/>with<sp/>v1<sp/>being<sp/>real3<sp/>and<sp/>a<sp/>Box<sp/>considering<sp/>periodic<sp/>boundary<sp/>conditions&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;metric&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="struct_h_e___face" kindref="compound">HE_FaceProp</ref><sp/>&amp;face,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;real3&gt;&amp;<sp/>vertices)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;real&gt;<sp/>metric(3,<sp/>-1.0);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices.size()<sp/>&lt;<sp/>3)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py::print(<sp/><sp/></highlight><highlight class="stringliteral">&quot;error<sp/>vertices<sp/>must<sp/>be<sp/>[v1,<sp/>v2,<sp/>v3]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pymemb::compute_form_factor_triangle(&amp;metric[0],<sp/>vertices[0],<sp/>vertices[1],<sp/>vertices[2]);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metric;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/></highlight><highlight class="stringliteral">&quot;get<sp/>the<sp/>metric&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;v1&quot;</highlight><highlight class="normal">,<sp/>&amp;HE_FaceProp::v1,<sp/></highlight><highlight class="stringliteral">&quot;one<sp/>of<sp/>vertices<sp/>that<sp/>define<sp/>the<sp/>face&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;v2&quot;</highlight><highlight class="normal">,<sp/>&amp;HE_FaceProp::v2,<sp/></highlight><highlight class="stringliteral">&quot;one<sp/>of<sp/>vertices<sp/>that<sp/>define<sp/>the<sp/>face&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;v3&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___face_1aba358c5350f246088a91f771875a6f16" kindref="member">HE_FaceProp::v3</ref>,<sp/></highlight><highlight class="stringliteral">&quot;one<sp/>of<sp/>vertices<sp/>that<sp/>define<sp/>the<sp/>face&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;_hedge&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___face_1a57f9a18cd7c3e5e82b880b1aac75342c" kindref="member">HE_FaceProp::_hedge</ref>,<sp/></highlight><highlight class="stringliteral">&quot;one<sp/>of<sp/>the<sp/>half-edges<sp/>bordering<sp/>the<sp/>face&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___face_1a03f02ae3558ec7a8f79c62a6515a05ca" kindref="member">HE_FaceProp::type</ref>,<sp/></highlight><highlight class="stringliteral">&quot;types&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;energy&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___face_1a9d94b11abc873938c7cced0a757c1187" kindref="member">HE_FaceProp::energy</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Conservative<sp/>Energy&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;property&quot;</highlight><highlight class="normal">,<sp/>&amp;HE_FaceProp::_property,<sp/></highlight><highlight class="stringliteral">&quot;properties&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_HE_Face_Vector(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;std::vector&lt;HE_FaceProp&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;FaceVector&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(py::init&lt;&gt;())</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">,<sp/>&amp;std::vector&lt;HE_FaceProp&gt;::clear)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;pop_back&quot;</highlight><highlight class="normal">,<sp/>&amp;std::vector&lt;HE_FaceProp&gt;::pop_back)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(std::vector&lt;HE_FaceProp&gt;::*)(const<sp/><ref refid="struct_h_e___face" kindref="compound">HE_FaceProp</ref><sp/>&amp;))<sp/>&amp;<sp/>std::vector&lt;<ref refid="struct_h_e___face" kindref="compound">HE_FaceProp</ref>&gt;::push_back)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__len__&quot;</highlight><highlight class="normal">,<sp/>[](const<sp/>std::vector&lt;<ref refid="struct_h_e___face" kindref="compound">HE_FaceProp</ref>&gt;<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.size();<sp/>})</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__iter__&quot;</highlight><highlight class="normal">,<sp/>[](std::vector&lt;HE_FaceProp&gt;<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py::make_iterator(v.begin(),<sp/>v.end());<sp/>},<sp/>py::keep_alive&lt;0,<sp/>1&gt;())</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;HE_FaceProp&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>v.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>py::index_error();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[i];<sp/>})</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__setitem__&quot;</highlight><highlight class="normal">,<sp/>[](std::vector&lt;HE_FaceProp&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/><ref refid="struct_h_e___face" kindref="compound">HE_FaceProp</ref><sp/>&amp;d)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>v.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>py::index_error();<sp/>v[i]<sp/>=<sp/>d;<sp/>});</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_HE_HalfEdge(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;HE_HalfEdgeProp&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;HalfEdge&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readonly(</highlight><highlight class="stringliteral">&quot;index&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___half_edge_1a5af1508a08237657ca639e56fe903437" kindref="member">HE_HalfEdgeProp::index</ref>,<sp/></highlight><highlight class="stringliteral">&quot;vertex<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>half-edge&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;vert_from&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___half_edge_1a7db693b228383b8985ea7a080f34b90d" kindref="member">HE_HalfEdgeProp::vert_from</ref>,<sp/></highlight><highlight class="stringliteral">&quot;vertex<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>half-edge&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;vert_to&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___half_edge_1a494604d4afa09f5d2e7d5fd61b551b62" kindref="member">HE_HalfEdgeProp::vert_to</ref>,<sp/></highlight><highlight class="stringliteral">&quot;vertex<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>half-edge&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;edge&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___half_edge_1a2ab618a97008d3ee47e485c984eb5fa2" kindref="member">HE_HalfEdgeProp::edge</ref>,<sp/></highlight><highlight class="stringliteral">&quot;edge<sp/>this<sp/>he<sp/>is<sp/>part<sp/>of&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;face&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___half_edge_1a1e4a6d5a4d215915e83106da85127169" kindref="member">HE_HalfEdgeProp::face</ref>,<sp/></highlight><highlight class="stringliteral">&quot;face<sp/>the<sp/>half-edge<sp/>borders&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;pair&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___half_edge_1ae3b4a834e3d24ded85c36d92c4e916a6" kindref="member">HE_HalfEdgeProp::pair</ref>,<sp/></highlight><highlight class="stringliteral">&quot;oppositely<sp/>oriented<sp/>adjacent<sp/>half-edge&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;next&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___half_edge_1a7eb7613a3009c398fb175a67e696ef2b" kindref="member">HE_HalfEdgeProp::next</ref>,<sp/></highlight><highlight class="stringliteral">&quot;next<sp/>half-edge<sp/>around<sp/>the<sp/>face&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;prev&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___half_edge_1ac5ef709b2a46f4f38708259537b914dd" kindref="member">HE_HalfEdgeProp::prev</ref>,<sp/></highlight><highlight class="stringliteral">&quot;previous<sp/>half-edge<sp/>around<sp/>the<sp/>face&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_readwrite(</highlight><highlight class="stringliteral">&quot;boundary&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="struct_h_e___half_edge_1a9b1bae499812d45772a0eab709db65cc" kindref="member">HE_HalfEdgeProp::boundary</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>if<sp/>true,<sp/>the<sp/>halfedge<sp/>is<sp/>a<sp/>boundary&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//.def_readwrite(&quot;property&quot;,<sp/>&amp;HE_HalfEdgeProp::_property);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_HE_HalfEdge_Vector(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;std::vector&lt;HE_HalfEdgeProp&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;HalfEdgeVector&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(py::init&lt;&gt;())</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">,<sp/>&amp;std::vector&lt;HE_HalfEdgeProp&gt;::clear)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;pop_back&quot;</highlight><highlight class="normal">,<sp/>&amp;std::vector&lt;HE_HalfEdgeProp&gt;::pop_back)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(std::vector&lt;HE_HalfEdgeProp&gt;::*)(const<sp/><ref refid="struct_h_e___half_edge" kindref="compound">HE_HalfEdgeProp</ref><sp/>&amp;))<sp/>&amp;<sp/>std::vector&lt;<ref refid="struct_h_e___half_edge" kindref="compound">HE_HalfEdgeProp</ref>&gt;::push_back)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__len__&quot;</highlight><highlight class="normal">,<sp/>[](const<sp/>std::vector&lt;<ref refid="struct_h_e___half_edge" kindref="compound">HE_HalfEdgeProp</ref>&gt;<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.size();<sp/>})</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__iter__&quot;</highlight><highlight class="normal">,<sp/>[](std::vector&lt;HE_HalfEdgeProp&gt;<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py::make_iterator(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py::keep_alive&lt;0,<sp/>1&gt;())</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;HE_HalfEdgeProp&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>v.size())</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>py::index_error();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[i];</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__setitem__&quot;</highlight><highlight class="normal">,<sp/>[](std::vector&lt;HE_HalfEdgeProp&gt;<sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/><ref refid="struct_h_e___half_edge" kindref="compound">HE_HalfEdgeProp</ref><sp/>&amp;d)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>v.size())</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>py::index_error();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>export_ReadMesh(py::module<sp/>&amp;m)</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>py::class_&lt;ReadMesh&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;ReadMesh&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(py::init&lt;std::string<sp/>&amp;,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>&amp;&gt;(),</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py::arg().noconvert(),<sp/></highlight><highlight class="comment">//<sp/>no<sp/>convert<sp/>the<sp/>arguments<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py::arg().noconvert(),</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Mesh<sp/>reader,<sp/>param1=faces<sp/>file<sp/>path,<sp/>param2=<sp/>vertices<sp/>file<sp/>path&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(py::init&lt;std::map&lt;std::string,<sp/>std::string&gt;&gt;(),</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Mesh<sp/>reader,<sp/>faces:<sp/>faces<sp/>file<sp/>path,<sp/>vertices:<sp/>vertices<sp/>file<sp/>path&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_read_mesh_1af2c32a75f5aaa7c5b2531d6930ea611d" kindref="member">ReadMesh::clear</ref>,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Clear<sp/>whole<sp/>vectors<sp/>in<sp/>reading.<sp/>Caution<sp/>this<sp/>clear<sp/>the<sp/>vectors<sp/>in<sp/>the<sp/>readmesh&lt;class&gt;<sp/>but<sp/>not<sp/>the<sp/>mesh<sp/>itself&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getVertices&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_read_mesh_1a01a85275711b23494dc042c7d8f11bf8" kindref="member">ReadMesh::get_vertices</ref>,<sp/>py::return_value_policy::reference,<sp/></highlight><highlight class="stringliteral">&quot;get<sp/>the<sp/>vertices&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getEdges&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_read_mesh_1ae6b3728a734a3d42dfdad56d37d985ce" kindref="member">ReadMesh::get_edges</ref>,<sp/>py::return_value_policy::reference,<sp/></highlight><highlight class="stringliteral">&quot;get<sp/>the<sp/>edges&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getFaces&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_read_mesh_1a3eb1abde43b83be0929d47bd39ba4175" kindref="member">ReadMesh::get_faces</ref>,<sp/>py::return_value_policy::reference,<sp/></highlight><highlight class="stringliteral">&quot;get<sp/>the<sp/>faces&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getHalfedges&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_read_mesh_1a0e2a1329fb3927bfaf8b2ac7155e2959" kindref="member">ReadMesh::get_halfedges</ref>,<sp/>py::return_value_policy::reference,<sp/></highlight><highlight class="stringliteral">&quot;get<sp/>the<sp/>halfedges&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getNumVertices&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_read_mesh_1a6846e9a11e684dde971df9689427db12" kindref="member">ReadMesh::getNumvertices</ref>,<sp/></highlight><highlight class="stringliteral">&quot;get<sp/>the<sp/>number<sp/>of<sp/>vertices&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getNumEdges&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_read_mesh_1ac3a89a2da15c60dfb71dd3b12b5bf40b" kindref="member">ReadMesh::getNumedges</ref>,<sp/></highlight><highlight class="stringliteral">&quot;get<sp/>the<sp/>number<sp/>of<sp/>edges&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getNumFaces&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_read_mesh_1a8b434b6cbec5cef83b431418b0319a6e" kindref="member">ReadMesh::getNumfaces</ref>,<sp/></highlight><highlight class="stringliteral">&quot;get<sp/>the<sp/>number<sp/>of<sp/>faces&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getNumHalfedges&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_read_mesh_1ac7b809a838e8352bdfce7b83d2cfffb9" kindref="member">ReadMesh::getNumhalfedges</ref>,<sp/></highlight><highlight class="stringliteral">&quot;get<sp/>the<sp/>number<sp/>of<sp/>halfedges&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="pymembrane/cppmodule/src/mesh/pybind_export_mesh.hpp"/>
  </compounddef>
</doxygen>
